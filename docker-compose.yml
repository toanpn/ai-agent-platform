services:
  # Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: agentplatform-sqlserver
    environment:
      SA_PASSWORD: "${SA_PASSWORD}"
      ACCEPT_EULA: "${ACCEPT_EULA}"
      MSSQL_PID: "${MSSQL_PID}"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - agentplatform-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -C -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: ./AgentPlatform.API/Dockerfile
    container_name: agentplatform-api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=${ConnectionStrings__DefaultConnection}
      - AgentRuntime__BaseUrl=${AgentRuntime__BaseUrl}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
    ports:
      - "5000:80"
    depends_on:
      sqlserver:
        condition: service_healthy
      agent-core:
        condition: service_started
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - agentplatform-network

  # Agent Core (Python)
  agent-core:
    build:
      context: ./backend/AgentPlatform.Core
      dockerfile: Dockerfile
    container_name: agentplatform-agent-core
    environment:
      - PYTHONPATH=${PYTHONPATH}
      - FLASK_ENV=${FLASK_ENV}
      - PORT=${PORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./backend/AgentPlatform.Core/uploads:/app/uploads
      - ./backend/AgentPlatform.Core/agents.json:/app/agents.json
      - ./gcp-credentials.json:/app/gcp-credentials.json:ro
      - chroma_db_data:/app/db
    networks:
      - agentplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: agentplatform-frontend
    environment:
      - NODE_ENV=${NODE_ENV}
      - ANGULAR_PORT=${ANGULAR_PORT}
    ports:
      - "${ANGULAR_PORT}:80"
      - "443:443"
    depends_on:
      api:
        condition: service_started
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - agentplatform-network

  certbot:
    image: certbot/certbot
    container_name: agentplatform-certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  certbot-init:
    image: certbot/certbot
    container_name: agentplatform-certbot-init
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "certbot certonly --webroot -w /var/www/certbot --email admin@kiotviet.space -d kiotviet.space --text --agree-tos --force-renewal"

volumes:
  sqlserver_data:
  chroma_db_data:
  certbot_conf:
  certbot_www:

networks:
  agentplatform-network:
    driver: bridge
