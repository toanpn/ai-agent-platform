"""
Confluence Tool Module

This module provides Confluence functionality using LangChain's Confluence toolkit.
Based on: https://python.langchain.com/docs/integrations/tools/confluence/
"""

import os
import logging
import json
import ast
from typing import Optional, Type, List, Union
from langchain.tools import BaseTool
from pydantic import BaseModel, Field, validator

logger = logging.getLogger(__name__)

# Try to import Confluence toolkit
try:
    from langchain_community.agent_toolkits.confluence.toolkit import ConfluenceToolkit
    from langchain_community.utilities.confluence import ConfluenceAPIWrapper
    CONFLUENCE_AVAILABLE = True
except ImportError:
    CONFLUENCE_AVAILABLE = False
    logger.warning("Confluence toolkit kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t v·ªõi: pip install langchain-community atlassian-python-api")

class ConfluenceToolInput(BaseModel):
    """Input schema for Confluence tool."""
    action: Optional[str] = Field(default=None, description="H√†nh ƒë·ªông Confluence c·∫ßn th·ª±c hi·ªán (v√≠ d·ª•: 'page_search', 'get_page_content', 'create_page', 'update_page')")
    parameters: Union[dict, str, None] = Field(default_factory=dict, description="Tham s·ªë cho h√†nh ƒë·ªông Confluence, d∆∞·ªõi d·∫°ng dictionary ho·∫∑c JSON string.")

    @validator("parameters", pre=True)
    def parameters_must_be_dict(cls, v):
        if v is None:
            return {}
        if isinstance(v, str):
            if not v.strip():
                return {}
            try:
                # First, try to parse as JSON, which is stricter
                return json.loads(v)
            except json.JSONDecodeError:
                # If JSON parsing fails, try to evaluate as a Python literal
                # This can handle dicts with single quotes, etc.
                try:
                    parsed_v = ast.literal_eval(v)
                    if isinstance(parsed_v, dict):
                        return parsed_v
                    else:
                        raise ValueError("Evaluated string is not a dictionary")
                except (ValueError, SyntaxError, MemoryError, TypeError) as e:
                    raise ValueError(f"parameters string is not a valid JSON or Python dictionary literal: {e}")
        return v

class ConfluenceTool(BaseTool):
    """Unified Confluence tool for agents using LangChain's ConfluenceToolkit."""

    name: str = "confluence"
    description: str = """
    C√¥ng c·ª• Confluence t√≠ch h·ª£p ƒë·ªÉ qu·∫£n l√Ω c√°c trang.
    S·ª≠ d·ª•ng khi c·∫ßn:
    - T√¨m ki·∫øm trang trong Confluence (action: 'page_search')
    - L·∫•y n·ªôi dung c·ªßa m·ªôt trang c·ª• th·ªÉ (action: 'get_page_content')
    - T·∫°o m·ªôt trang m·ªõi (action: 'create_page')
    - C·∫≠p nh·∫≠t m·ªôt trang ƒë√£ c√≥ (action: 'update_page')

    H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
    - ƒê·ªÉ t√¨m ki·∫øm trang: action="page_search", parameters={{"query": "ti√™u ƒë·ªÅ trang ho·∫∑c t·ª´ kh√≥a", "space_key": "SPACEKEY"}}
    - ƒê·ªÉ l·∫•y n·ªôi dung trang: action="get_page_content", parameters={{"page_id": 12345}}
    - ƒê·ªÉ t·∫°o trang m·ªõi: action="create_page", parameters={{"space_key": "SPACEKEY", "title": "Ti√™u ƒë·ªÅ trang m·ªõi", "content": "N·ªôi dung trang..."}}
    - ƒê·ªÉ c·∫≠p nh·∫≠t trang: action="update_page", parameters={{"page_id": 12345, "title": "Ti√™u ƒë·ªÅ m·ªõi", "content": "N·ªôi dung m·ªõi..."}}
    """
    args_schema: Type[BaseModel] = ConfluenceToolInput

    confluence_url: Optional[str] = None
    confluence_username: Optional[str] = None
    confluence_api_token: Optional[str] = None
    confluence_toolkit: Optional[ConfluenceToolkit] = None
    initialization_error: Optional[str] = None

    def __init__(self, confluence_base_url: str = None, confluence_username: str = None, confluence_api_token: str = None, **kwargs):
        super().__init__(**kwargs)

        self.confluence_url = confluence_base_url or os.getenv("CONFLUENCE_BASE_URL")
        self.confluence_username = confluence_username or os.getenv("CONFLUENCE_USERNAME")
        self.confluence_api_token = confluence_api_token or os.getenv("CONFLUENCE_API_TOKEN")

        if CONFLUENCE_AVAILABLE and all([self.confluence_url, self.confluence_username, self.confluence_api_token]):
            try:
                confluence_api = ConfluenceAPIWrapper(
                    confluence_url=self.confluence_url,
                    username=self.confluence_username,
                    api_key=self.confluence_api_token
                )
                self.confluence_toolkit = ConfluenceToolkit.from_confluence_api_wrapper(confluence_api)
            except Exception as e:
                error_message = f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o Confluence toolkit. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin c·∫•u h√¨nh (URL, username, token). L·ªói: {e}"
                logger.error(error_message)
                self.initialization_error = error_message
                self.confluence_toolkit = None

    def _run(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Execute Confluence action using the unified toolkit."""
        if not action:
            return f"‚ùå Thi·∫øu tham s·ªë 'action'. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng:\n{self.description}"

        params = parameters or {}

        print(f"CONFLUENCE_TOOL: Executing action='{action}' with parameters={params}")
        try:
            if not CONFLUENCE_AVAILABLE:
                return "‚ùå Confluence toolkit kh√¥ng kh·∫£ d·ª•ng. C·∫ßn c√†i ƒë·∫∑t: pip install langchain-community atlassian-python-api"

            if self.initialization_error:
                return f"‚ùå {self.initialization_error}"

            if not self.confluence_toolkit:
                return self._mock_result(action, **params)

            tools = self.confluence_toolkit.get_tools()

            if action == "page_search":
                return self._page_search(tools, params)
            elif action == "get_page_content":
                return self._get_page_content(tools, params)
            elif action == "create_page":
                return self._create_page(tools, params)
            elif action == "update_page":
                return self._update_page(tools, params)
            else:
                return f"‚ùå H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {action}. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng: page_search, get_page_content, create_page, update_page"

        except Exception as e:
            logger.error(f"Error in Confluence tool: {e}")
            print(f"CONFLUENCE_TOOL: Error during _run: {e}")
            return f"‚ùå L·ªói khi th·ª±c hi·ªán Confluence action '{action}': {str(e)}"

    def _find_tool(self, tools: List[BaseTool], tool_name: str) -> Optional[BaseTool]:
        for tool in tools:
            if tool.name.lower() == tool_name.lower():
                return tool
        return None

    def _page_search(self, tools: List[BaseTool], parameters: dict) -> str:
        """Search for pages in Confluence."""
        search_tool = self._find_tool(tools, "Search pages")
        if not search_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t√¨m ki·∫øm trang"

        try:
            query = parameters.get("query")
            if not query:
                return "‚ùå Thi·∫øu tham s·ªë 'query' ƒë·ªÉ t√¨m ki·∫øm."
            
            space_key = parameters.get("space_key")
            limit = parameters.get("limit", 5)
            
            tool_input = {"query": query, "space_key": space_key, "limit": limit}
            # Filter out None values
            tool_input = {k: v for k, v in tool_input.items() if v is not None}
            
            result = search_tool.run(tool_input)
            return f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm trang Confluence cho '{query}':\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi t√¨m ki·∫øm trang Confluence: {str(e)}"

    def _get_page_content(self, tools: List[BaseTool], parameters: dict) -> str:
        """Get content of a Confluence page."""
        get_tool = self._find_tool(tools, "Get page content by page id")
        if not get_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• l·∫•y n·ªôi dung trang"

        try:
            page_id = parameters.get("page_id")
            if not page_id:
                return "‚ùå Thi·∫øu 'page_id' ƒë·ªÉ l·∫•y n·ªôi dung trang"

            result = get_tool.run({"page_id": page_id})
            return f"üìÑ N·ªôi dung trang Confluence (ID: {page_id}):\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y n·ªôi dung trang Confluence: {str(e)}"
            
    def _create_page(self, tools: List[BaseTool], parameters: dict) -> str:
        """Create a new Confluence page."""
        create_tool = self._find_tool(tools, "Create Page")
        if not create_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t·∫°o trang"

        try:
            space_key = parameters.get("space_key")
            title = parameters.get("title")
            content = parameters.get("content")
            parent_id = parameters.get("parent_id")
            
            if not all([space_key, title, content]):
                return "‚ùå Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: 'space_key', 'title', 'content'"

            tool_input = {"space_key": space_key, "title": title, "content": content, "parent_id": parent_id}
            tool_input = {k: v for k, v in tool_input.items() if v is not None}
            
            result = create_tool.run(tool_input)
            return f"‚úÖ Trang Confluence ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o trang Confluence: {str(e)}"

    def _update_page(self, tools: List[BaseTool], parameters: dict) -> str:
        """Update an existing Confluence page."""
        update_tool = self._find_tool(tools, "Update Page")
        if not update_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• c·∫≠p nh·∫≠t trang"

        try:
            page_id = parameters.get("page_id")
            title = parameters.get("title")
            content = parameters.get("content")
            
            if not page_id or not title or not content:
                 return "‚ùå Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: 'page_id', 'title', 'content'"

            tool_input = {"page_id": page_id, "title": title, "content": content}
            
            result = update_tool.run(tool_input)
            return f"‚úÖ Trang Confluence (ID: {page_id}) ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi c·∫≠p nh·∫≠t trang Confluence: {str(e)}"

    def _mock_result(self, action: str, **parameters: dict) -> str:
        """Return mock results when Confluence is not configured."""
        if action == "page_search":
            query = parameters.get('query', 'Test Query')
            return f"""üîç K·∫øt qu·∫£ t√¨m ki·∫øm Confluence m√¥ ph·ªèng cho '{query}':

üìÑ **Page ID: 12345** - Project Plan Q3
   Kh√¥ng gian: DEV
   T√°c gi·∫£: john.doe
   C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: 2024-07-20

üìÑ **Page ID: 67890** - API Documentation
   Kh√¥ng gian: DEV
   T√°c gi·∫£: jane.smith
   C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: 2024-07-19

üí° **L∆∞u √Ω:** ƒê·ªÉ t√¨m ki·∫øm Confluence th·ª±c, c·∫ßn c·∫•u h√¨nh CONFLUENCE_BASE_URL, CONFLUENCE_USERNAME, v√† CONFLUENCE_API_TOKEN"""

        elif action == "get_page_content":
            page_id = parameters.get('page_id', 98765)
            return f"""üìÑ N·ªôi dung trang Confluence m√¥ ph·ªèng (ID: {page_id}):

**Ti√™u ƒë·ªÅ:** Onboarding new developers

**N·ªôi dung:**
Ch√†o m·ª´ng ƒë·∫øn v·ªõi team! D∆∞·ªõi ƒë√¢y l√† c√°c b∆∞·ªõc ƒë·ªÉ b·∫Øt ƒë·∫ßu:
1. Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ph√°t tri·ªÉn...
2. ƒê·ªçc t√†i li·ªáu ki·∫øn tr√∫c...
3. Tham gia cu·ªôc h·ªçp team h√†ng ng√†y...

üí° **L∆∞u √Ω:** ƒê·ªÉ l·∫•y n·ªôi dung trang th·ª±c, c·∫ßn c·∫•u h√¨nh CONFLUENCE_BASE_URL, CONFLUENCE_USERNAME, v√† CONFLUENCE_API_TOKEN"""
            
        elif action == "create_page":
            title = parameters.get('title', 'Trang Test')
            space = parameters.get('space_key', 'TEST')
            return f"""‚úÖ Trang Confluence m√¥ ph·ªèng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!

**ID Trang:** {hash(title) % 100000 + 50000}
**Ti√™u ƒë·ªÅ:** {title}
**Kh√¥ng gian:** {space}
**N·ªôi dung:** {parameters.get('content', 'ƒê√¢y l√† n·ªôi dung m·∫∑c ƒë·ªãnh.')}

üí° **L∆∞u √Ω:** ƒê·ªÉ t·∫°o trang Confluence th·ª±c, c·∫ßn c·∫•u h√¨nh CONFLUENCE_BASE_URL, CONFLUENCE_USERNAME, v√† CONFLUENCE_API_TOKEN"""

        elif action == "update_page":
            page_id = parameters.get('page_id', 11223)
            return f"""‚úÖ Trang Confluence m√¥ ph·ªèng (ID: {page_id}) ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!

**ID Trang:** {page_id}
**Ti√™u ƒë·ªÅ m·ªõi:** {parameters.get('title', 'Ti√™u ƒë·ªÅ ƒë√£ c·∫≠p nh·∫≠t')}
**N·ªôi dung m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u.**

üí° **L∆∞u √Ω:** ƒê·ªÉ c·∫≠p nh·∫≠t trang Confluence th·ª±c, c·∫ßn c·∫•u h√¨nh CONFLUENCE_BASE_URL, CONFLUENCE_USERNAME, v√† CONFLUENCE_API_TOKEN"""
        
        else:
            return f"‚ùå H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {action}"

    async def _arun(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Async version of the _run method."""
        return self._run(action, parameters)

def create_confluence_tool(confluence_base_url: str = None, confluence_username: str = None, confluence_api_token: str = None) -> ConfluenceTool:
    """Create a Confluence tool instance with configuration."""
    return ConfluenceTool(
        confluence_base_url=confluence_base_url,
        confluence_username=confluence_username,
        confluence_api_token=confluence_api_token
    )

# Export the tool
__all__ = ['ConfluenceTool', 'create_confluence_tool'] 
