"""
JIRA Tool Module

This module provides JIRA functionality using LangChain's JIRA toolkit.
Based on: https://python.langchain.com/docs/integrations/tools/jira/
"""

import os
import logging
import json
import ast
from typing import Optional, Type, List, Union
from langchain.tools import BaseTool
from pydantic import BaseModel, Field, validator

logger = logging.getLogger(__name__)

# Try to import JIRA toolkit
try:
    from langchain_community.agent_toolkits.jira.toolkit import JiraToolkit
    from langchain_community.utilities.jira import JiraAPIWrapper
    JIRA_AVAILABLE = True
except ImportError:
    JIRA_AVAILABLE = False
    logger.warning("JIRA toolkit kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t v·ªõi: pip install langchain-community atlassian-python-api")

class JiraToolInput(BaseModel):
    """Input schema for JIRA tool."""
    action: Optional[str] = Field(default=None, description="H√†nh ƒë·ªông JIRA c·∫ßn th·ª±c hi·ªán (v√≠ d·ª•: 'create_issue', 'search_issues', 'get_issue', 'get_projects')")
    parameters: Union[dict, str, None] = Field(default_factory=dict, description="Tham s·ªë cho h√†nh ƒë·ªông JIRA, d∆∞·ªõi d·∫°ng dictionary ho·∫∑c JSON string.")

    @validator("parameters", pre=True)
    def parameters_must_be_dict(cls, v):
        if v is None:
            return {}
        if isinstance(v, str):
            if not v.strip():
                return {}
            try:
                # First, try to parse as JSON, which is stricter
                return json.loads(v)
            except json.JSONDecodeError:
                # If JSON parsing fails, try to evaluate as a Python literal 
                # This can handle dicts with single quotes, etc.
                try:
                    parsed_v = ast.literal_eval(v)
                    if isinstance(parsed_v, dict):
                        return parsed_v
                    else:
                        raise ValueError("Evaluated string is not a dictionary")
                except (ValueError, SyntaxError, MemoryError, TypeError) as e:
                    raise ValueError(f"parameters string is not a valid JSON or Python dictionary literal: {e}")
        return v

class JiraTool(BaseTool):
    """Unified JIRA tool for agents using LangChain's JiraToolkit."""
    
    name: str = "jira"
    description: str = """
    C√¥ng c·ª• JIRA t√≠ch h·ª£p cho qu·∫£n l√Ω issues v√† projects.
    S·ª≠ d·ª•ng khi c·∫ßn:
    - T·∫°o issues/tickets m·ªõi trong JIRA (action: 'create_issue')
    - T√¨m ki·∫øm issues b·∫±ng JQL (action: 'search_issues')
    - L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt issue (action: 'get_issue')
    - L·∫•y danh s√°ch c√°c project (action: 'get_projects')
    
    H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
    - ƒê·ªÉ t·∫°o issue: action="create_issue", parameters={{"summary": "ti√™u ƒë·ªÅ", "description": "m√¥ t·∫£", "project": {{"key": "PROJECT_KEY"}}, "issuetype": {{"name": "Task"}}}}
    - ƒê·ªÉ t√¨m ki·∫øm: action="search_issues", parameters={{"jql": "project = KEY AND status = 'Open'"}}
    - ƒê·ªÉ l·∫•y chi ti·∫øt issue: action="get_issue", parameters={{"issue_key": "PROJECT-123"}} (c≈©ng ch·∫•p nh·∫≠n "issue_id")
    - ƒê·ªÉ l·∫•y danh s√°ch projects: action="get_projects", parameters={{}}
    """
    args_schema: Type[BaseModel] = JiraToolInput
    
    jira_instance_url: Optional[str] = None
    jira_username: Optional[str] = None
    jira_api_token: Optional[str] = None
    jira_cloud: bool = False
    jira_toolkit: Optional[JiraToolkit] = None
    initialization_error: Optional[str] = None
    
    def __init__(self, jira_instance_url: str = None, jira_username: str = None, jira_api_token: str = None, **kwargs):
        super().__init__(**kwargs)
        
        self.jira_instance_url = jira_instance_url or os.getenv("JIRA_INSTANCE_URL")
        self.jira_username = jira_username or os.getenv("JIRA_USERNAME")
        self.jira_api_token = jira_api_token or os.getenv("JIRA_API_TOKEN")
        
        # Automatically determine if it's Jira Cloud from the URL
        if self.jira_instance_url and ".atlassian.net" in self.jira_instance_url.lower():
            self.jira_cloud = True
        
        if JIRA_AVAILABLE and all([self.jira_instance_url, self.jira_username, self.jira_api_token]):
            try:
                jira_api = JiraAPIWrapper(
                    jira_instance_url=self.jira_instance_url,
                    jira_username=self.jira_username,
                    jira_api_token=self.jira_api_token,
                    jira_cloud=self.jira_cloud,
                )
                self.jira_toolkit = JiraToolkit.from_jira_api_wrapper(jira_api)
            except Exception as e:
                error_message = f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o JIRA toolkit. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin c·∫•u h√¨nh (URL, username, token). L·ªói: {e}"
                logger.error(error_message)
                self.initialization_error = error_message
                self.jira_toolkit = None
        
    def _run(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Execute JIRA action using the unified toolkit."""
        if not action:
            return f"‚ùå Thi·∫øu tham s·ªë 'action'. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng:\n{self.description}"

        # Ensure parameters is a dict
        params = parameters or {}
        
        print(f"JIRA_TOOL: Executing action='{action}' with parameters={params}")
        try:
            if not JIRA_AVAILABLE:
                return "‚ùå JIRA toolkit kh√¥ng kh·∫£ d·ª•ng. C·∫ßn c√†i ƒë·∫∑t: pip install langchain-community atlassian-python-api"
            
            # If initialization failed, return the error
            if self.initialization_error:
                return f"‚ùå {self.initialization_error}"
                
            # Check if toolkit was initialized (no credentials provided) -> use mock
            if not self.jira_toolkit:
                return self._mock_result(action, **params)

            tools = self.jira_toolkit.get_tools()
            
            # Execute based on action
            if action == "create_issue":
                return self._create_issue(tools, params)
            elif action == "search_issues":
                return self._search_issues(tools, params)
            elif action == "get_issue":
                return self._get_issue(tools, params)
            elif action == "get_projects":
                return self._get_projects(tools, params)
            else:
                return f"‚ùå H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {action}. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng: create_issue, search_issues, get_issue, get_projects"
            
        except Exception as e:
            logger.error(f"Error in JIRA tool: {e}")
            print(f"JIRA_TOOL: Error during _run: {e}")
            return f"‚ùå L·ªói khi th·ª±c hi·ªán JIRA action '{action}': {str(e)}"
    
    def _create_issue(self, tools: List[BaseTool], parameters: dict) -> str:
        """Create a new JIRA issue."""
        create_tool = None
        for tool in tools:
            if tool.name == "Create Issue":
                create_tool = tool
                break
        
        if not create_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t·∫°o issue"
        
        try:
            # Ensure required fields are present
            if "summary" not in parameters:
                return "‚ùå Thi·∫øu tr∆∞·ªùng 'summary' ƒë·ªÉ t·∫°o issue"
            
            # Set default values if not provided
            if "project" not in parameters:
                parameters["project"] = {"key": "IT"}
            if "issuetype" not in parameters:
                parameters["issuetype"] = {"name": "Task"}
            if "priority" not in parameters:
                parameters["priority"] = {"name": "Medium"}
            
            result = create_tool.run(parameters)
            return f"‚úÖ JIRA issue ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n\n{result}"
            
        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o JIRA issue: {str(e)}"
    
    def _search_issues(self, tools: List[BaseTool], parameters: dict) -> str:
        """Search JIRA issues using JQL."""
        search_tool = None
        for tool in tools:
            if tool.name == "jql_query":
                search_tool = tool
                break
        
        if not search_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t√¨m ki·∫øm"
        
        try:
            jql = parameters.get("jql", "")
            if not jql:
                return "‚ùå Thi·∫øu truy v·∫•n JQL ƒë·ªÉ t√¨m ki·∫øm"
            
            result = search_tool.run(jql)
            return f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm JIRA v·ªõi JQL '{jql}':\n\n{result}"
            
        except Exception as e:
            return f"‚ùå L·ªói khi t√¨m ki·∫øm JIRA: {str(e)}"
    
    def _get_issue(self, tools: List[BaseTool], parameters: dict) -> str:
        """Get JIRA issue details using JQL search."""
        print(f"JIRA_TOOL: Getting issue with parameters: {parameters}")
        
        search_tool = None
        for tool in tools:
            # The tool name is 'jql_query' as per the debug output.
            if tool.name == "jql_query":
                search_tool = tool
                break
        
        if not search_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t√¨m ki·∫øm JQL c·ªßa JIRA."

        try:
            issue_key = parameters.get("issue_key") or parameters.get("issue_id")
            if not issue_key:
                return "‚ùå Thi·∫øu 'issue_key' ho·∫∑c 'issue_id' ƒë·ªÉ l·∫•y th√¥ng tin issue"
            
            # Use JQL to search for the specific issue key
            jql = f'key = "{issue_key.strip()}"'
            print(f"JIRA_TOOL: Using JQL: {jql}")
            
            result = search_tool.run(jql)
            
            # Check if the result is empty or indicates no issues found
            if not result or "no issues found" in result.lower():
                return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho issue '{issue_key}'. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ticket."

            return f"üé´ Chi ti·∫øt JIRA issue {issue_key}:\n\n{result}"
            
        except Exception as e:
            print(f"JIRA_TOOL: Error getting issue: {e}")
            return f"‚ùå L·ªói khi l·∫•y JIRA issue b·∫±ng JQL: {str(e)}"
    
    def _get_projects(self, tools: List[BaseTool], parameters: dict) -> str:
        """Get all JIRA projects."""
        projects_tool = None
        for tool in tools:
            if tool.name == "Get Projects":
                projects_tool = tool
                break
        
        if not projects_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• l·∫•y projects"
        
        try:
            result = projects_tool.run(parameters or "")
            return f"üìÇ Danh s√°ch JIRA projects:\n\n{result}"
            
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y danh s√°ch projects: {str(e)}"
    
    def _mock_result(self, action: str, **parameters: dict) -> str:
        """Return mock results when JIRA is not configured."""
        if action == "create_issue":
            summary = parameters.get("summary", "Test Issue")
            project_key = parameters.get("project", {}).get("key", "IT")
            issue_key = f"{project_key}-{hash(summary) % 9999 + 1000}"
            
            return f"""‚úÖ JIRA issue m√¥ ph·ªèng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!

üé´ **Chi ti·∫øt issue:**
Issue Key: {issue_key}
D·ª± √°n: {project_key}
T√≥m t·∫Øt: {summary}
M√¥ t·∫£: {parameters.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}
Lo·∫°i: {parameters.get('issuetype', {}).get('name', 'Task')}
∆Øu ti√™n: {parameters.get('priority', {}).get('name', 'Medium')}

üí° **L∆∞u √Ω:** ƒê·ªÉ t·∫°o JIRA issue th·ª±c, c·∫ßn c·∫•u h√¨nh JIRA_INSTANCE_URL, JIRA_USERNAME, v√† JIRA_API_TOKEN"""
            
        elif action == "search_issues":
            jql = parameters.get("jql", "")
            return f"""üîç K·∫øt qu·∫£ t√¨m ki·∫øm JIRA m√¥ ph·ªèng v·ªõi JQL '{jql}':

üé´ **Issue 1: IT-1234**
T√≥m t·∫Øt: Sample bug report
Tr·∫°ng th√°i: In Progress
Ng∆∞·ªùi ƒë∆∞·ª£c giao: john.doe@company.com
∆Øu ti√™n: High

üé´ **Issue 2: IT-1235**
T√≥m t·∫Øt: Feature request for new functionality
Tr·∫°ng th√°i: To Do
Ng∆∞·ªùi ƒë∆∞·ª£c giao: jane.smith@company.com
∆Øu ti√™n: Medium

üé´ **Issue 3: IT-1236**
T√≥m t·∫Øt: System maintenance task
Tr·∫°ng th√°i: Done
Ng∆∞·ªùi ƒë∆∞·ª£c giao: admin@company.com
∆Øu ti√™n: Low

üí° **L∆∞u √Ω:** ƒê·ªÉ t√¨m ki·∫øm JIRA th·ª±c, c·∫ßn c·∫•u h√¨nh JIRA_INSTANCE_URL, JIRA_USERNAME, v√† JIRA_API_TOKEN"""
            
        elif action == "get_issue":
            issue_key = parameters.get("issue_key", "IT-123")
            return f"""üé´ Chi ti·∫øt JIRA issue m√¥ ph·ªèng {issue_key}:

**T√≥m t·∫Øt:** Sample Issue for Testing
**Tr·∫°ng th√°i:** In Progress
**Lo·∫°i:** Task
**∆Øu ti√™n:** Medium
**Ng∆∞·ªùi ƒë∆∞·ª£c giao:** developer@company.com
**Ng∆∞·ªùi b√°o c√°o:** manager@company.com
**Ng√†y t·∫°o:** 2024-01-15 09:00
**Ng√†y c·∫≠p nh·∫≠t:** 2024-01-16 14:30

**M√¥ t·∫£:**
ƒê√¢y l√† m√¥ t·∫£ chi ti·∫øt c·ªßa issue m·∫´u. Issue n√†y bao g·ªìm c√°c y√™u c·∫ßu c·ª• th·ªÉ v√† c·∫ßn ƒë∆∞·ª£c ho√†n th√†nh trong th·ªùi gian quy ƒë·ªãnh.

üí° **L∆∞u √Ω:** ƒê·ªÉ l·∫•y JIRA issue th·ª±c, c·∫ßn c·∫•u h√¨nh JIRA_INSTANCE_URL, JIRA_USERNAME, v√† JIRA_API_TOKEN"""
            
        elif action == "get_projects":
            return f"""üìÇ Danh s√°ch JIRA projects m√¥ ph·ªèng:

**IT** - IT Support Project
**SALES** - Sales Support Project  
**DEV** - Development Project
**QA** - Quality Assurance Project

üí° **L∆∞u √Ω:** ƒê·ªÉ l·∫•y danh s√°ch projects th·ª±c, c·∫ßn c·∫•u h√¨nh JIRA_INSTANCE_URL, JIRA_USERNAME, v√† JIRA_API_TOKEN"""
        
        else:
            return f"‚ùå H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {action}"
    
    async def _arun(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Async version of the _run method."""
        return self._run(action, parameters)
        
def create_jira_tool(jira_instance_url: str = None, jira_username: str = None, jira_api_token: str = None) -> JiraTool:
    """Create a JIRA tool instance with configuration."""
    return JiraTool(
        jira_instance_url=jira_instance_url,
        jira_username=jira_username,
        jira_api_token=jira_api_token
    )

# Export the tool
__all__ = ['JiraTool', 'create_jira_tool'] 