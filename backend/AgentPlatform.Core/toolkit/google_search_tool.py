"""
Google Search Tool Module

This module provides Google search functionality using LangChain's GoogleSearchAPIWrapper.
Based on: https://python.langchain.com/docs/integrations/tools/google_search/
"""

import os
import logging
from typing import Optional, Type
from langchain.tools import BaseTool, tool
from langchain_core.tools import Tool
from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)

# Try to import Google Search API wrapper
try:
    from langchain_google_community import GoogleSearchAPIWrapper
    GOOGLE_SEARCH_AVAILABLE = True
except ImportError:
    GOOGLE_SEARCH_AVAILABLE = False
    logger.warning("Google Search API not available. Install with: pip install langchain-google-community")

class GoogleSearchInput(BaseModel):
    """Input schema for Google search tool."""
    query: str = Field(description="The search query string")
    num_results: Optional[int] = Field(default=5, description="Number of search results to return")

class GoogleSearchTool(BaseTool):
    """Google search tool for agents."""
    
    name: str = "google_search"
    description: str = """
    C√¥ng c·ª• t√¨m ki·∫øm Google ƒë·ªÉ t√¨m th√¥ng tin hi·ªán t·∫°i tr√™n internet.
    S·ª≠ d·ª•ng khi c·∫ßn:
    - T√¨m th√¥ng tin m·ªõi nh·∫•t tr√™n internet
    - T√¨m tin t·ª©c, s·ª± ki·ªán hi·ªán t·∫°i
    - Nghi√™n c·ª©u ch·ªß ƒë·ªÅ c·ª• th·ªÉ
    - Ki·ªÉm tra th√¥ng tin c·∫≠p nh·∫≠t
    """
    args_schema: Type[BaseModel] = GoogleSearchInput
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
    def _run(self, query: str, num_results: Optional[int] = 5) -> str:
        """Execute Google search."""
        try:
            if not GOOGLE_SEARCH_AVAILABLE:
                return "‚ùå Google Search API kh√¥ng kh·∫£ d·ª•ng. C·∫ßn c√†i ƒë·∫∑t: pip install langchain-google-community"
            
            # Enhanced query validation
            if query is None:
                return "‚ùå L·ªói: Tham s·ªë query l√† b·∫Øt bu·ªôc"
            
            if not isinstance(query, str):
                return "‚ùå L·ªói: Query ph·∫£i l√† chu·ªói vƒÉn b·∫£n"
            
            query = query.strip()
            if not query:
                return "‚ùå L·ªói: C√¢u truy v·∫•n t√¨m ki·∫øm kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng"
            
            if len(query) < 2:
                return "‚ùå L·ªói: C√¢u truy v·∫•n t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±"
            
            # Validate num_results
            if num_results is not None and (not isinstance(num_results, int) or num_results < 1 or num_results > 10):
                num_results = 5
                
            logger.info(f"Executing Google search for query: '{query}' with {num_results} results")
            
            # Check for required environment variables
            api_key = os.getenv("GOOGLE_API_KEY")
            cse_id = os.getenv("GOOGLE_CSE_ID")
            
            if not api_key or not cse_id:
                # Return mock results for demo
                return self._mock_search_results(query, num_results)
            
            # Final validation before API call
            if not query or len(query.strip()) == 0:
                return "‚ùå L·ªói: Kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi query r·ªóng"
            
            # Initialize Google Search API wrapper
            search = GoogleSearchAPIWrapper(k=num_results or 5)
            
            # Perform search and get detailed results
            # Double-check query before sending to API
            final_query = query.strip()
            if not final_query:
                return "‚ùå L·ªói: Query b·ªã r·ªóng sau khi x·ª≠ l√Ω"
                
            results = search.results(final_query, num_results or 5)
            
            if not results:
                return f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho: {query}"
            
            # Format results
            formatted_response = f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm Google cho '{query}':\n\n"
            
            for i, result in enumerate(results, 1):
                title = result.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                snippet = result.get('snippet', 'Kh√¥ng c√≥ m√¥ t·∫£')
                link = result.get('link', '#')
                
                formatted_response += f"**{i}. {title}**\n"
                formatted_response += f"üìù {snippet}\n"
                formatted_response += f"üîó {link}\n\n"
            
            return formatted_response
            
        except Exception as e:
            logger.error(f"Error in Google search: {e}")
            return f"‚ùå L·ªói khi t√¨m ki·∫øm Google: {str(e)}"
    
    def _mock_search_results(self, query: str, num_results: int) -> str:
        """Return mock search results when API is not configured."""
        mock_results = [
            {
                "title": f"Th√¥ng tin m·ªõi nh·∫•t v·ªÅ {query}",
                "snippet": f"H∆∞·ªõng d·∫´n to√†n di·ªán v√† c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y v·ªÅ {query}. Bao g·ªìm c√°c kh√≠a c·∫°nh quan tr·ªçng v√† xu h∆∞·ªõng hi·ªán t·∫°i.",
                "link": "https://example.com/search-1"
            },
            {
                "title": f"C√°ch th·ª±c hi·ªán {query} - H∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß",
                "snippet": f"H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc v√† th·ª±c ti·ªÖn t·ªët nh·∫•t cho {query}. H·ªçc t·ª´ chuy√™n gia v√† nh·∫≠n m·∫πo th·ª±c t·∫ø.",
                "link": "https://example.com/guide-2"
            },
            {
                "title": f"{query} - Tin t·ª©c v√† C·∫≠p nh·∫≠t",
                "snippet": f"Tin t·ª©c g·∫ßn ƒë√¢y v√† ph√°t tri·ªÉn li√™n quan ƒë·∫øn {query}. C·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t.",
                "link": "https://example.com/news-3"
            }
        ]
        
        formatted_response = f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm m√¥ ph·ªèng cho '{query}' (API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh):\n\n"
        
        for i, result in enumerate(mock_results[:num_results], 1):
            formatted_response += f"**{i}. {result['title']}**\n"
            formatted_response += f"üìù {result['snippet']}\n"
            formatted_response += f"üîó {result['link']}\n\n"
        
        formatted_response += "\nüí° **L∆∞u √Ω:** ƒê·ªÉ s·ª≠ d·ª•ng t√¨m ki·∫øm Google th·ª±c, c·∫ßn c·∫•u h√¨nh GOOGLE_API_KEY v√† GOOGLE_CSE_ID"
        
        return formatted_response
    
    async def _arun(self, query: str, num_results: Optional[int] = 5) -> str:
        """Async version of Google search."""
        return self._run(query, num_results)

# Simple function-based tool for backward compatibility
@tool
def google_search_simple(query: str) -> str:
    """
    T√¨m ki·∫øm Google ƒë∆°n gi·∫£n.
    
    Args:
        query: C√¢u truy v·∫•n t√¨m ki·∫øm
        
    Returns:
        K·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ Google
    """
    tool = GoogleSearchTool()
    return tool._run(query)

# Tool factory function
def create_google_search_tool() -> GoogleSearchTool:
    """Create a Google search tool instance."""
    return GoogleSearchTool()

# Export the tools
__all__ = ['GoogleSearchTool', 'create_google_search_tool', 'google_search_simple'] 