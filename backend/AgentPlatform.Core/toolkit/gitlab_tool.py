"""
GitLab Tool Module

This module provides GitLab functionality using LangChain's GitLab toolkit.
Based on: https://python.langchain.com/docs/integrations/tools/gitlab/
"""

import os
import logging
import json
import ast
from typing import Optional, Type, List, Union
from langchain.tools import BaseTool
from pydantic import BaseModel, Field, validator

logger = logging.getLogger(__name__)

# Try to import GitLab toolkit
try:
    from langchain_community.agent_toolkits.gitlab.toolkit import GitLabToolkit
    from langchain_community.utilities.gitlab import GitLabAPIWrapper
    GITLAB_AVAILABLE = True
except ImportError:
    GITLAB_AVAILABLE = False
    logger.warning("GitLab toolkit kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t v·ªõi: pip install langchain-community python-gitlab")

class GitLabToolInput(BaseModel):
    """Input schema for GitLab tool."""
    action: Optional[str] = Field(default=None, description="H√†nh ƒë·ªông GitLab c·∫ßn th·ª±c hi·ªán")
    parameters: Union[dict, str, None] = Field(default_factory=dict, description="Tham s·ªë cho h√†nh ƒë·ªông GitLab")

    @validator("parameters", pre=True)
    def parameters_must_be_dict(cls, v):
        if v is None:
            return {}
        if isinstance(v, str):
            if not v.strip():
                return {}
            try:
                return json.loads(v)
            except json.JSONDecodeError:
                try:
                    parsed_v = ast.literal_eval(v)
                    if isinstance(parsed_v, dict):
                        return parsed_v
                    else:
                        raise ValueError("Evaluated string is not a dictionary")
                except (ValueError, SyntaxError, MemoryError, TypeError) as e:
                    raise ValueError(f"parameters string is not a valid JSON or Python dictionary literal: {e}")
        return v

class GitLabTool(BaseTool):
    """Unified GitLab tool for agents using LangChain's GitLabToolkit."""

    name: str = "gitlab"
    description: str = """
    C√¥ng c·ª• GitLab t√≠ch h·ª£p ƒë·ªÉ qu·∫£n l√Ω repository, issues v√† merge requests.
    
    C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng:
    - get_issues: L·∫•y danh s√°ch t·∫•t c·∫£ issues
    - get_issue: L·∫•y chi ti·∫øt issue c·ª• th·ªÉ (c·∫ßn issue_number)
    - comment_issue: B√¨nh lu·∫≠n tr√™n issue (c·∫ßn issue_number v√† comment)
    - create_merge_request: T·∫°o merge request (c·∫ßn title, c√≥ th·ªÉ c√≥ description)
    - create_file: T·∫°o file m·ªõi (c·∫ßn file_path v√† file_contents)
    - read_file: ƒê·ªçc n·ªôi dung file (c·∫ßn file_path)
    - update_file: C·∫≠p nh·∫≠t file (c·∫ßn file_path v√† file_contents)
    - delete_file: X√≥a file (c·∫ßn file_path)
    
    V√≠ d·ª• s·ª≠ d·ª•ng:
    - L·∫•y issues: action="get_issues"
    - L·∫•y issue #5: action="get_issue", parameters={"issue_number": 5}
    - B√¨nh lu·∫≠n: action="comment_issue", parameters={"issue_number": 5, "comment": "Fixed!"}
    - T·∫°o MR: action="create_merge_request", parameters={"title": "Bug fix", "description": "Fix login bug"}
    """
    args_schema: Type[BaseModel] = GitLabToolInput

    gitlab_url: Optional[str] = None
    gitlab_token: Optional[str] = None
    gitlab_repository: Optional[str] = None
    gitlab_branch: Optional[str] = None
    gitlab_base_branch: Optional[str] = None
    gitlab_toolkit: Optional[GitLabToolkit] = None
    initialization_error: Optional[str] = None

    def __init__(self, gitlab_url: str = None, gitlab_personal_access_token: str = None, 
                 gitlab_repository: str = None, gitlab_branch: str = None, 
                 gitlab_base_branch: str = None, **kwargs):
        super().__init__(**kwargs)

        self.gitlab_url = gitlab_url or os.getenv("GITLAB_URL") or "https://gitlab.com"
        self.gitlab_token = gitlab_personal_access_token or os.getenv("GITLAB_PERSONAL_ACCESS_TOKEN")
        self.gitlab_repository = gitlab_repository or os.getenv("GITLAB_REPOSITORY")
        self.gitlab_branch = gitlab_branch or os.getenv("GITLAB_BRANCH") or "main"
        self.gitlab_base_branch = gitlab_base_branch or os.getenv("GITLAB_BASE_BRANCH") or "main"

        if GITLAB_AVAILABLE and all([self.gitlab_url, self.gitlab_token, self.gitlab_repository]):
            try:
                os.environ["GITLAB_URL"] = self.gitlab_url
                os.environ["GITLAB_PERSONAL_ACCESS_TOKEN"] = self.gitlab_token
                os.environ["GITLAB_REPOSITORY"] = self.gitlab_repository
                os.environ["GITLAB_BRANCH"] = self.gitlab_branch
                os.environ["GITLAB_BASE_BRANCH"] = self.gitlab_base_branch
                
                gitlab_api = GitLabAPIWrapper()
                self.gitlab_toolkit = GitLabToolkit.from_gitlab_api_wrapper(gitlab_api)
            except Exception as e:
                error_message = f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o GitLab toolkit: {e}"
                logger.error(error_message)
                self.initialization_error = error_message
                self.gitlab_toolkit = None

    def _run(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Execute GitLab action using the unified toolkit."""
        
        # List of supported actions
        supported_actions = [
            "get_issues", "get_issue", "comment_issue", "create_merge_request",
            "create_file", "read_file", "update_file", "delete_file"
        ]
        
        if not action:
            actions_list = "\n".join([f"  - {act}" for act in supported_actions])
            return f"""‚ùå Thi·∫øu tham s·ªë 'action'. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng:

{actions_list}

V√≠ d·ª•: 
- action="get_issues" 
- action="get_issue", parameters={{"issue_number": 1}}
- action="comment_issue", parameters={{"issue_number": 1, "comment": "test"}}"""

        params = parameters or {}

        try:
            if not GITLAB_AVAILABLE:
                return "‚ùå GitLab toolkit kh√¥ng kh·∫£ d·ª•ng. C·∫ßn c√†i ƒë·∫∑t: pip install langchain-community python-gitlab"

            if self.initialization_error:
                return f"‚ùå {self.initialization_error}"

            # Validate action
            if action not in supported_actions:
                actions_list = ", ".join(supported_actions)
                return f"‚ùå H√†nh ƒë·ªông '{action}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng: {actions_list}"

            if not self.gitlab_toolkit:
                return self._mock_result(action, **params)

            tools = self.gitlab_toolkit.get_tools()

            # Execute action using action mapping
            action_map = {
                "get_issues": self._get_issues,
                "get_issue": self._get_issue,
                "comment_issue": self._comment_issue,
                "create_merge_request": self._create_merge_request,
                "create_file": self._create_file,
                "read_file": self._read_file,
                "update_file": self._update_file,
                "delete_file": self._delete_file
            }
            
            return action_map[action](tools, params)

        except Exception as e:
            logger.error(f"Error in GitLab tool: {e}")
            return f"‚ùå L·ªói khi th·ª±c hi·ªán GitLab action '{action}': {str(e)}"

    def _find_tool(self, tools: List[BaseTool], tool_name: str) -> Optional[BaseTool]:
        """Find a tool by name (case-insensitive)."""
        for tool in tools:
            if tool.name.lower() == tool_name.lower():
                return tool
        return None

    def _get_issues(self, tools: List[BaseTool], parameters: dict) -> str:
        """Get issues from the repository."""
        get_issues_tool = self._find_tool(tools, "Get Issues")
        if not get_issues_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• l·∫•y danh s√°ch issues"

        try:
            result = get_issues_tool.run({})
            return f"üìã Danh s√°ch Issues:\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y danh s√°ch issues: {str(e)}"

    def _get_issue(self, tools: List[BaseTool], parameters: dict) -> str:
        """Get details of a specific issue."""
        get_issue_tool = self._find_tool(tools, "Get Issue")
        if not get_issue_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• l·∫•y chi ti·∫øt issue"

        try:
            issue_number = parameters.get("issue_number")
            if not issue_number:
                return "‚ùå Thi·∫øu 'issue_number'"

            result = get_issue_tool.run({"issue_number": issue_number})
            return f"üìÑ Chi ti·∫øt Issue #{issue_number}:\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y chi ti·∫øt issue: {str(e)}"

    def _comment_issue(self, tools: List[BaseTool], parameters: dict) -> str:
        """Comment on a specific issue."""
        comment_tool = self._find_tool(tools, "Comment on Issue")
        if not comment_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• b√¨nh lu·∫≠n issue"

        try:
            issue_number = parameters.get("issue_number")
            comment = parameters.get("comment")
            
            if not issue_number or not comment:
                return "‚ùå Thi·∫øu 'issue_number' ho·∫∑c 'comment'"

            result = comment_tool.run({"issue_number": issue_number, "comment": comment})
            return f"üí¨ ƒê√£ b√¨nh lu·∫≠n tr√™n Issue #{issue_number}:\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi b√¨nh lu·∫≠n issue: {str(e)}"

    def _create_merge_request(self, tools: List[BaseTool], parameters: dict) -> str:
        """Create a merge request."""
        mr_tool = self._find_tool(tools, "Create Merge Request")
        if not mr_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t·∫°o merge request"

        try:
            title = parameters.get("title")
            description = parameters.get("description", "")
            
            if not title:
                return "‚ùå Thi·∫øu 'title'"

            tool_input = {"title": title, "description": description}
            result = mr_tool.run(tool_input)
            return f"üîÄ ƒê√£ t·∫°o Merge Request:\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o merge request: {str(e)}"

    def _create_file(self, tools: List[BaseTool], parameters: dict) -> str:
        """Create a new file in the repository."""
        create_tool = self._find_tool(tools, "Create File")
        if not create_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• t·∫°o file"

        try:
            file_path = parameters.get("file_path")
            file_contents = parameters.get("file_contents")
            
            if not file_path or file_contents is None:
                return "‚ùå Thi·∫øu 'file_path' ho·∫∑c 'file_contents'"

            tool_input = {"file_path": file_path, "file_contents": file_contents}
            result = create_tool.run(tool_input)
            return f"üìù ƒê√£ t·∫°o file '{file_path}':\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o file: {str(e)}"

    def _read_file(self, tools: List[BaseTool], parameters: dict) -> str:
        """Read file content from the repository."""
        read_tool = self._find_tool(tools, "Read File")
        if not read_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• ƒë·ªçc file"

        try:
            file_path = parameters.get("file_path")
            if not file_path:
                return "‚ùå Thi·∫øu 'file_path'"

            result = read_tool.run({"file_path": file_path})
            return f"üìñ N·ªôi dung file '{file_path}':\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}"

    def _update_file(self, tools: List[BaseTool], parameters: dict) -> str:
        """Update an existing file in the repository."""
        update_tool = self._find_tool(tools, "Update File")
        if not update_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• c·∫≠p nh·∫≠t file"

        try:
            file_path = parameters.get("file_path")
            file_contents = parameters.get("file_contents")
            
            if not file_path or file_contents is None:
                return "‚ùå Thi·∫øu 'file_path' ho·∫∑c 'file_contents'"

            tool_input = {"file_path": file_path, "file_contents": file_contents}
            result = update_tool.run(tool_input)
            return f"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t file '{file_path}':\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi c·∫≠p nh·∫≠t file: {str(e)}"

    def _delete_file(self, tools: List[BaseTool], parameters: dict) -> str:
        """Delete a file from the repository."""
        delete_tool = self._find_tool(tools, "Delete File")
        if not delete_tool:
            return "‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• x√≥a file"

        try:
            file_path = parameters.get("file_path")
            if not file_path:
                return "‚ùå Thi·∫øu 'file_path'"

            result = delete_tool.run({"file_path": file_path})
            return f"üóëÔ∏è ƒê√£ x√≥a file '{file_path}':\n\n{result}"
        except Exception as e:
            return f"‚ùå L·ªói khi x√≥a file: {str(e)}"

    def _mock_result(self, action: str, **parameters: dict) -> str:
        """Return mock results when GitLab is not configured."""
        if action == "get_issues":
            return """üìã Danh s√°ch Issues m√¥ ph·ªèng:

üî¥ **Issue #1** - Bug trong t√≠nh nƒÉng login
   üìÖ Ng√†y t·∫°o: 2024-01-15
   üë§ T√°c gi·∫£: developer1
   üè∑Ô∏è Labels: bug, urgent
   üìù Tr·∫°ng th√°i: Open

üü° **Issue #2** - C·∫≠p nh·∫≠t documentation cho API
   üìÖ Ng√†y t·∫°o: 2024-01-14
   üë§ T√°c gi·∫£: writer1
   üè∑Ô∏è Labels: documentation, enhancement
   üìù Tr·∫°ng th√°i: Open

üü¢ **Issue #3** - Th√™m unit tests cho module auth
   üìÖ Ng√†y t·∫°o: 2024-01-13
   üë§ T√°c gi·∫£: tester1
   üè∑Ô∏è Labels: testing, improvement
   üìù Tr·∫°ng th√°i: Closed

üí° **L∆∞u √Ω:** ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng. ƒê·ªÉ l·∫•y issues th·ª±c t·ª´ GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "get_issue":
            issue_number = parameters.get('issue_number', 1)
            return f"""üìÑ Chi ti·∫øt Issue #{issue_number}:

**üè∑Ô∏è Ti√™u ƒë·ªÅ:** Bug trong t√≠nh nƒÉng login
**üìù Tr·∫°ng th√°i:** Open
**üë§ T√°c gi·∫£:** developer1
**üìÖ Ng√†y t·∫°o:** 2024-01-15 10:30:00
**üîñ Labels:** bug, urgent, frontend
**üë• Assignees:** developer2, qa-team

**üìã M√¥ t·∫£:**
Khi ng∆∞·ªùi d√πng nh·∫≠p sai m·∫≠t kh·∫©u 3 l·∫ßn li√™n ti·∫øp, h·ªá th·ªëng kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o l·ªói r√µ r√†ng. 
Thay v√†o ƒë√≥, trang web b·ªã treo v√† ng∆∞·ªùi d√πng kh√¥ng bi·∫øt ph·∫£i l√†m g√¨ ti·∫øp theo.

**üí¨ B√¨nh lu·∫≠n g·∫ßn ƒë√¢y:**
- developer2 (2024-01-16): "ƒêang ƒëi·ªÅu tra v·∫•n ƒë·ªÅ n√†y, c√≥ th·ªÉ li√™n quan ƒë·∫øn rate limiting"
- qa-team (2024-01-16): "ƒê√£ reproduce ƒë∆∞·ª£c bug, x·∫£y ra tr√™n c·∫£ Chrome v√† Firefox"

üí° **L∆∞u √Ω:** ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng. ƒê·ªÉ l·∫•y issue th·ª±c t·ª´ GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "comment_issue":
            issue_number = parameters.get('issue_number', 1)
            comment = parameters.get('comment', 'Test comment')
            return f"""üí¨ ƒê√£ th√™m b√¨nh lu·∫≠n m√¥ ph·ªèng tr√™n Issue #{issue_number}:

**üìù N·ªôi dung:** {comment}
**üë§ T√°c gi·∫£:** gitlab-bot
**‚è∞ Th·ªùi gian:** 2024-01-17 14:25:00
**üîó Link:** https://gitlab.com/username/repository/-/issues/{issue_number}#note_123456

üí° **L∆∞u √Ω:** ƒê√¢y l√† m√¥ ph·ªèng. ƒê·ªÉ b√¨nh lu·∫≠n th·ª±c tr√™n GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "create_merge_request":
            title = parameters.get('title', 'Fix login bug')
            description = parameters.get('description', 'S·ª≠a l·ªói ƒëƒÉng nh·∫≠p cho ng∆∞·ªùi d√πng')
            return f"""üîÄ ƒê√£ t·∫°o Merge Request m√¥ ph·ªèng:

**üè∑Ô∏è Ti√™u ƒë·ªÅ:** {title}
**üìã M√¥ t·∫£:** {description}
**üåø Source Branch:** feature/fix-login-bug
**üéØ Target Branch:** main
**üìù Tr·∫°ng th√°i:** Open
**üîó MR #15:** https://gitlab.com/username/repository/-/merge_requests/15
**üë§ T√°c gi·∫£:** gitlab-bot
**üìÖ Ng√†y t·∫°o:** 2024-01-17 14:30:00

**üìä Th·ªëng k√™:**
- ‚úÖ 3 files changed
- ‚ûï 25 additions
- ‚ûñ 8 deletions

üí° **L∆∞u √Ω:** ƒê√¢y l√† m√¥ ph·ªèng. ƒê·ªÉ t·∫°o MR th·ª±c tr√™n GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "create_file":
            file_path = parameters.get('file_path', 'test.txt')
            file_contents = parameters.get('file_contents', 'Test content')
            return f"""üìù ƒê√£ t·∫°o file m√¥ ph·ªèng:

**üìÅ ƒê∆∞·ªùng d·∫´n:** {file_path}
**üìÑ N·ªôi dung:**
```
{file_contents}
```
**üåø Branch:** feature/add-new-file
**üíæ Commit:** "Add {file_path} with initial content"
**üîó Link:** https://gitlab.com/username/repository/-/blob/main/{file_path}

üí° **L∆∞u √Ω:** ƒê√¢y l√† m√¥ ph·ªèng. ƒê·ªÉ t·∫°o file th·ª±c tr√™n GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "read_file":
            file_path = parameters.get('file_path', 'README.md')
            return f"""üìñ N·ªôi dung file m√¥ ph·ªèng '{file_path}':

```markdown
# üöÄ Project Title

ƒê√¢y l√† m·ªôt d·ª± √°n m·∫´u s·ª≠ d·ª•ng GitLab CI/CD.

## üìã T√≠nh nƒÉng ch√≠nh

- ‚úÖ Authentication system
- ‚úÖ User management
- ‚úÖ API endpoints
- üîÑ Real-time notifications

## üîß C√†i ƒë·∫∑t

1. Clone repository
2. Install dependencies: `npm install`
3. Start development server: `npm run dev`

## ü§ù ƒê√≥ng g√≥p

Vui l√≤ng t·∫°o issue ho·∫∑c merge request ƒë·ªÉ ƒë√≥ng g√≥p.
```

**üìä Th√¥ng tin file:**
- üìè K√≠ch th∆∞·ªõc: 1.2 KB
- üìÖ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: 2024-01-16 09:15:00
- üë§ T√°c gi·∫£: developer1

üí° **L∆∞u √Ω:** ƒê√¢y l√† n·ªôi dung m√¥ ph·ªèng. ƒê·ªÉ ƒë·ªçc file th·ª±c t·ª´ GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "update_file":
            file_path = parameters.get('file_path', 'README.md')
            file_contents = parameters.get('file_contents', 'Updated content')
            return f"""‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t file m√¥ ph·ªèng:

**üìÅ ƒê∆∞·ªùng d·∫´n:** {file_path}
**üìÑ N·ªôi dung m·ªõi:**
```
{file_contents}
```
**üåø Branch:** feature/update-readme
**üíæ Commit:** "Update {file_path} with new information"
**üîó Link:** https://gitlab.com/username/repository/-/blob/main/{file_path}
**üìÖ Th·ªùi gian:** 2024-01-17 14:35:00

üí° **L∆∞u √Ω:** ƒê√¢y l√† m√¥ ph·ªèng. ƒê·ªÉ c·∫≠p nh·∫≠t file th·ª±c tr√™n GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        elif action == "delete_file":
            file_path = parameters.get('file_path', 'old_file.txt')
            return f"""üóëÔ∏è ƒê√£ x√≥a file m√¥ ph·ªèng:

**üìÅ ƒê∆∞·ªùng d·∫´n ƒë√£ x√≥a:** {file_path}
**üåø Branch:** feature/cleanup-old-files
**üíæ Commit:** "Remove obsolete file {file_path}"
**üìÖ Th·ªùi gian:** 2024-01-17 14:40:00
**üîó Commit Link:** https://gitlab.com/username/repository/-/commit/abc123def456

‚ö†Ô∏è **L∆∞u √Ω:** File ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi repository v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c.

üí° **L∆∞u √Ω:** ƒê√¢y l√† m√¥ ph·ªèng. ƒê·ªÉ x√≥a file th·ª±c tr√™n GitLab, c·∫ßn c·∫•u h√¨nh credentials."""

        else:
            supported_actions = ["get_issues", "get_issue", "comment_issue", "create_merge_request", "create_file", "read_file", "update_file", "delete_file"]
            return f"‚ùå H√†nh ƒë·ªông '{action}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c h√†nh ƒë·ªông kh·∫£ d·ª•ng: {', '.join(supported_actions)}"

    async def _arun(self, action: Optional[str] = None, parameters: Optional[dict] = None) -> str:
        """Async version of the _run method."""
        return self._run(action, parameters)

def create_gitlab_tool(gitlab_url: str = None, gitlab_personal_access_token: str = None,
                      gitlab_repository: str = None, gitlab_branch: str = None,
                      gitlab_base_branch: str = None) -> GitLabTool:
    """Create a GitLab tool instance with configuration."""
    return GitLabTool(
        gitlab_url=gitlab_url,
        gitlab_personal_access_token=gitlab_personal_access_token,
        gitlab_repository=gitlab_repository,
        gitlab_branch=gitlab_branch,
        gitlab_base_branch=gitlab_base_branch
    )

# Export the tool
__all__ = ['GitLabTool', 'create_gitlab_tool'] 